name: Publish

on:
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Lint
        run: bun run lint

      - name: Build
        run: bun run build

      # Copy README and LICENSE to packages for npm (if monorepo structure)
      - name: Copy README and LICENSE
        run: |
          if [ -d "packages/core" ]; then
            echo "Copying files to monorepo packages/core/"
            cp README.md packages/core/README.md
            cp LICENSE packages/core/LICENSE
          else
            echo "Flat structure - README.md and LICENSE already in root"
          fi

      # Get version from tag
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing version: ${{ steps.get_version.outputs.version }}"
          echo "Current directory structure:"
          ls -la
          echo "Looking for packages directory:"
          find . -name "packages" -type d
          echo "Looking for any package.json files:"
          find . -name "package.json"
          
          # Check if we're in a monorepo structure or flat structure
          if [ -d "packages/core" ]; then
            echo "Monorepo structure detected"
            cd packages/core
          elif [ -f "package.json" ] && grep -q "vite-plugin-react-inspector" package.json; then
            echo "Flat structure detected - working in root"
          else
            echo "‚ùå Cannot find package.json with vite-plugin-react-inspector"
            exit 1
          fi
          
          # Update package name and version for publishing
          npm pkg set name="vite-plugin-react-inspect"
          npm pkg set version="${{ steps.get_version.outputs.version }}"
          
          # Publish the package
          npm publish
